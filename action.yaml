name: Thoth Adviser
author: thoth-station
description: Get Security Recommendations on your Python Dependencies

inputs:
  requirements-path:
    description: Dependency requirements file path
    required: true
    default: Pipfile
  requirements-format:
    description: Requirements format for dependencies, one of (pip | pip-tools | pip-compile | pipenv | setup.cfg)
    required: true
    default: pipenv
  overlay-directory:
    description: Optional overlay directory to get advise on a specific environment (see documentation for overlays configuration https://github.com/thoth-station/thamos#overlays-directory)
    required: false
  allow-cve:
    description: CVE considered as acceptable, that will be ignored during the resolution process
    required: false

outputs:
  thoth-search-ui-link:
    description: Link to results in Thoth Search UI
    value: ${{ steps.get-thoth-advise.outputs.thoth-search-ui-link }}
  thoth-error-msg:
    description: Error message if dependencies could not be resolved
    value: ${{ steps.get-thoth-advise.outputs.thoth-error-msg }}
  advise-exit-code:
    description: Exit code returned in case of advise failure
    value: ${{ steps.get-thoth-advise.outputs.advise-exit-code }}
  runtime-environment-msg:
    description: Output message with runtime environment for which the advise was run
    value: $${{ steps.get-thoth-advise.outputs.runtime-environment-msg }}
  allow-cve-msg:
    description: Output message with CVE allowed during the resolution process
    value: ${{ steps.get-thoth-advise.outputs.allowed-cve-msg }}

runs:
  using: 'composite'
  steps:
    - name: Get Thoth advise
      shell: bash
      id: get-thoth-advise
      run: |
        set +e
        mkdir /tmp/thoth/
        cp -r . /tmp/thoth/
        cd /tmp/thoth/
        if ${{ inputs.requirements-format == 'setup.cfg' }};
            then
            requirements_format=pip
            echo "$($GITHUB_ACTION_PATH/setup_cfg_to_requirements_txt.py ${{ inputs.requirements-path }})"
        else
            requirements_format=${{ inputs.requirements-format }}
        fi

        if [ '${{ inputs.allow-cve }}' != '' ];
          then
          labels_command='--labels allow-cve=${{ inputs.allow-cve }}'
        else
          labels_command=''
        fi

        if [ '${{ inputs.overlay-directory }}' != '' ];
            then
            thamos check
            sed -i "s/pipenv/$requirements_format/g" .thoth.yaml
            thamos advise --recommendation-type security --runtime-environment ${{ inputs.overlay-directory }} --no-write --json $labels_command > $GITHUB_ACTION_PATH/advise_result.json
            advise_exit_code=$?
            echo "::set-output name=runtime-environment-msg::${{ inputs.overlay-directory }}"
        else
            sed -i "s/pipenv/$requirements_format/g" $GITHUB_ACTION_PATH/templates/ubuntu_config_template.yaml
            thamos config --no-interactive --template $GITHUB_ACTION_PATH/templates/ubuntu_config_template.yaml
            thamos check
            thamos advise --recommendation-type security --no-write --json $labels_command > $GITHUB_ACTION_PATH/advise_result.json
            advise_exit_code=$?
            echo "::set-output name=runtime-environment-msg::Not Specified"
        fi

        if [[ $advise_exit_code -eq 0 ]];
            then
            sed -i -n '/"error":/,$p' $GITHUB_ACTION_PATH/advise_result.json
            sed -i '1s/^/{/' $GITHUB_ACTION_PATH/advise_result.json
            echo "::set-output name=thoth-error-msg:: :heavy_check_mark: $(python3 $GITHUB_ACTION_PATH/verify_cve.py $GITHUB_ACTION_PATH/advise_result.json)"
        else
            echo "::set-output name=thoth-error-msg:: :x: dependencies could not be resolved."
        fi

        echo "::set-output name=advise-exit-code::$advise_exit_code"
        echo "::set-output name=thoth-search-ui-link::https://thoth-station.ninja/search/advise/$last_analysis_id/summary"

        if [ '${{ inputs.allow-cve-msg }}' != '' ];
          then
          echo "::set-output name=allow-cve-msg::${{ inputs.allow-cve }}"
        else
          echo "::set-output name=allow-cve-msg::None"
        fi

    - uses: jwalton/gh-find-current-pr@v1
      id: finder

    - uses: marocchino/sticky-pull-request-comment@v2
      with:
        number: ${{ steps.finder.outputs.pr }}
        recreate: true
        message: |
          - **Dependency analysis status:** ${{ steps.get-thoth-advise.outputs.thoth-error-msg }}
          - **See advise results in Thoth Search UI:** ${{ steps.get-thoth-advise.outputs.thoth-search-ui-link }}
          - **Runtime environment:** ${{ steps.get-thoth-advise.outputs.runtime-environment-msg }}
          - **Allowed CVE:** ${{ steps.get-thoth-advise.outputs.allow-cve-msg }}

    - name: Fail workflow if dependencies could not be resolved
      shell: bash
      id: fail-workflow-if-error
      run: |
        if [ ${{ steps.get-thoth-advise.outputs.advise-exit-code }} -gt 0 ];
          then
            exit ${{ steps.get-thoth-advise.outputs.advise-exit-code }}
        fi
